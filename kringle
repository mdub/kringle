#! /usr/bin/env ruby

require 'clamp'
require 'dry-struct'
require 'dry-types'

module Types
  include Dry.Types()
end

class Family < Dry::Struct
  transform_keys(&:to_sym)
  attribute :adults, Types::Array.of(Types::Strict::String)
  attribute :kids, Types::Array.of(Types::Strict::String).default([].freeze)

  def members
    adults + kids
  end
end

class Person < Dry::Struct
  attribute :name, Types::Strict::String
  attribute :type, Types::Strict::Symbol
  attribute :family, Types::Strict::Integer
end

FAMILIES = [
  {
    adults: %w(Roland Sandra)
  },
  {
    adults: %w(Mike Tanya),
    kids: %w(Ngara Jonah),
  },
  {
    adults: %w(Hamish Michelle Maddy Caity),
  },
  {
    adults: %w(Tamas Rachel),
    kids: %w(Josh Bailey Jayde Courtney)
  }
].map(&Family.method(:new))

PEOPLE = FAMILIES.each_with_index.map do |family, i|
  family.adults.map { |m| Person.new(name: m, family: i, type: :adult) } +
  family.kids.map { |m| Person.new(name: m, family: i, type: :child) }
end.flatten

Clamp do

  subcommand "everyone", "show everyone" do
    def execute
      PEOPLE.each do |person|
        p person
      end
    end
  end
  
  subcommand "adults", "generate ring of adults" do

    def execute
      pairs = generate_pairs
      pairs.each do |a,b|
        puts "#{a.name} for #{b.name}"
      end
    end    
  
    def generate_pairs
      loop do
        ring = adults.shuffle
        pairs = ring.zip(ring.rotate(1))
        return pairs if pairs.all? { |a,b| pair_okay?(a,b) }
      end
    end

    def adults 
      PEOPLE.select { |p| p.type == :adult }
    end

    def pair_okay?(a, b)
      a.family != b.family
    end
  
  end

end